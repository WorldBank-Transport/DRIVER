---

# Restart PostgreSQL, since it may be in a bad state if a previous
# provision attempt failed
- name: Restart PostgreSQL
  service: name=postgresql state=restarted

- name: Create PostgreSQL super user
  become_user: postgres
  postgresql_user: name="{{ postgresql_username }}"
                   password="{{ postgresql_password }}"
                   role_attr_flags=SUPERUSER
                   state=present

- name: Create PostgreSQL database
  become_user: postgres
  postgresql_db: name="{{ postgresql_database }}"
                 owner="{{ postgresql_username }}"

- name: Add PostGIS extension
  become_user: postgres
  command: psql {{ postgresql_database }} -c "CREATE EXTENSION postgis"
  register: psql_result
  failed_when: >
    psql_result.rc != 0 and ("already exists" not in psql_result.stderr)
  changed_when: "psql_result.rc == 0"

- name: Create PostgreSQL user for Windshaft
  become_user: postgres
  postgresql_user: name="{{ windshaft_db_username }}"
                   password="{{ windshaft_db_password }}"
                   role_attr_flags=LOGIN
                   db="{{ postgresql_database }}"
                   state=present

- name: Create PostgreSQL user for Heimdall
  become_user: postgres
  postgresql_user: name="{{ heimdall_db_username }}"
                   password="{{ heimdall_db_password }}"
                   role_attr_flags=LOGIN
                   db="{{ postgresql_database }}"
                   state=present

- name: Create PostgreSQL database for Heimdall
  become_user: postgres
  postgresql_db: name="{{ heimdall_lock_db }}"
                 owner="{{ heimdall_db_username }}"

- name: Set up monit monitoring of PostgreSQL
  template: src=monit-postgresql.cfg.j2 dest=/etc/monit/conf.d/postgresql.cfg
  notify:
    - Restart monit

- { include: firewall.yml }
